"use client";
import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSprints, useCreateSprint, Sprint, useUpdateSprint, useArchiveSprint, useStartSprint } from "../../../../hooks/useSprints";
import Card from "../../../../components/Card";
import Button from "../../../../components/Button";
import Modal from "../../../../components/Modal";
import Spinner from "../../../../components/Spinner";
import Input from "../../../../components/Input";
import SprintDetailModal from "../../../../components/SprintDetailModal";
import { useSprintIssues } from "../../../../hooks/useSprintIssues";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { CalendarDaysIcon, FlagIcon, RocketLaunchIcon, CheckCircleIcon, ArchiveBoxIcon, EyeIcon, PencilSquareIcon, ArchiveBoxXMarkIcon, PlusIcon } from '@heroicons/react/24/outline';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { addDays } from 'date-fns';
import ConfirmationModal from "../../../../components/ConfirmationModal";

const schema = z.object({
  name: z.string().min(2),
  goal: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
});

type FormData = z.infer<typeof schema>;

function groupSprints(sprints: Sprint[] = []) {
  return {
    ACTIVE.*includes(s.status)),
    PLANNED.*includes(s.status)),
    COMPLETED.*includes(s.status)),
  };
}

function SprintProgress({ projectId, sprintId }: { projectId: string; sprintId: string }) {
  const { issues, isLoading } = useSprintIssues(projectId, sprintId);
  if (isLoading) return <div className="h-2 bg-gray-200 dark:bg-gray-800 rounded-full w-full animate-pulse" />;
  const total = issues?.length || 0;
  const done = issues?.filter(i => i.status === 'Done').length || 0;
  const percent = total ? Math.round((done / total) * 100) : 0;
  return (
    <div className="mt-2">
      <div className="h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden">
        <div className="h-2 bg-accent-green" style={{ width: `${percent}%` }} />
      </div>
      <div className="text-xs text-gray-500 mt-1">{done} of {total} done ({percent}%)</div>
    </div>
  );
}

export default function SprintsPage() {
  const params = useParams();
  const projectId = params.id as string;
  const { sprints, isLoading, isError } = useSprints(projectId);
  const createSprint = useCreateSprint(projectId);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedSprint, setSelectedSprint] = useState<Sprint | null>(null);
  const [editSprint, setEditSprint] = useState<Sprint | null>(null);
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
    setError,
  } = useForm<FormData>({ resolver: zodResolver(schema) });
  const [sortBy, setSortBy] = useState<'startDate' | 'endDate'>('startDate');
  // Advanced date picker state
  const [startDate, setStartDate] = useState<Date | null>(new Date());
  const [endDate, setEndDate] = useState<Date | null>(addDays(new Date(), 14));
  const [dateError, setDateError] = useState<string | null>(null);
  const [editStartDate, setEditStartDate] = React.useState<Date | null>(null);
  const [editEndDate, setEditEndDate] = React.useState<Date | null>(null);
  const [editDateError, setEditDateError] = React.useState<string | null>(null);
  const [completeModalOpen, setCompleteModalOpen] = useState(false);
  const [sprintToComplete, setSprintToComplete] = useState<Sprint | null>(null);
  const [nextSprintId, setNextSprintId] = useState<string | undefined>();
  const [archiveError, setArchiveError] = useState<string | null>(null);
  const archiveSprint = useArchiveSprint(projectId, sprintToComplete?.id || "");
  const [startingSprintId, setStartingSprintId] = useState<string | null>(null);
  const startSprint = useStartSprint(projectId, startingSprintId || "");
  const updateSprint = useUpdateSprint(projectId, editSprint?.id || "");

  useEffect(() => {
    if (editSprint) {
      setEditStartDate(editSprint.startDate ? new Date(editSprint.startDate) : new Date());
      setEditEndDate(editSprint.endDate ? new Date(editSprint.endDate) : addDays(new Date(), 14));
      setEditDateError(null);
    }
  }, [editSprint]);

  const onSubmit = async (data: FormData) => {
    setDateError(null);
    if (!startDate || !endDate) {
      setDateError('Both start and end dates are required.');
      return;
    }
    if (startDate >= endDate) {
      setDateError('End date must be after start date.');
      return;
    }
    try {
      await createSprint.mutateAsync({
        ...data,
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
      });
      setModalOpen(false);
      reset();
      setStartDate(new Date());
      setEndDate(addDays(new Date(), 14));
    } catch (e: unknown) {
      const message = e && typeof e === 'object' && 'message' in e ? (e as { message?: string }).message : undefined;
      setError('root', { message: message || 'Failed to create sprint' });
    }
  };

  const grouped = groupSprints(sprints);

  // Helper for edit modal: only reset if editing a new sprint
  const handleEditSprint = (sprint: Sprint) => {
    setEditSprint(sprint);
    if (!editSprint || editSprint.id !== sprint.id) {
      reset({
        name: sprint.name,
        goal: sprint.goal || "",
        startDate: sprint.startDate,
        endDate: sprint.endDate,
      });
    }
  };

  return (
    <div className="relative">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-10 p-8 bg-gradient-to-r from-blue-500/80 via-purple-500/70 to-blue-600/80 rounded-3xl shadow-2xl border border-white/20 dark:border-gray-800/50 relative overflow-hidden">
        <div className="flex items-center gap-4">
          <RocketLaunchIcon className="h-12 w-12 text-white drop-shadow-lg" />
          <div>
            <h2 className="text-4xl font-extrabold text-white tracking-tight drop-shadow">Sprints</h2>
            <p className="text-lg text-blue-100/90 font-medium mt-1">Plan, track, and deliver work in focused iterations.</p>
          </div>
        </div>
      </div>
      {/* Sprint Sections */}
      {isLoading ? (
        <div className="flex justify-center py-24"><Spinner className="h-10 w-10" /></div>
      ) : isError ? (
        <div className="text-center text-red-500 bg-red-50 dark:bg-red-900/20 p-8 rounded-2xl shadow-lg border border-red-200 dark:border-red-800 mt-12">
          <p className="text-lg font-semibold">Failed to load sprints.</p>
        </div>
      ) : (
        <div className="space-y-12 mt-8">
          {Object.entries(grouped)
            .filter(([status]) => status !== 'archived')
            .map(([status, sprints]) => {
              const sectionIcons: Record<string, React.ReactElement> = {
                active: <RocketLaunchIcon className="h-6 w-6 text-green-500" />,
                upcoming: <FlagIcon className="h-6 w-6 text-blue-400" />,
                completed: <CheckCircleIcon className="h-6 w-6 text-purple-500" />,
              };
              const sectionBg: Record<string, string> = {
                active: 'from-green-100/60 via-green-50/40 to-blue-50/30 dark:from-green-900/30 dark:via-green-950/10 dark:to-blue-950/10',
                upcoming: 'from-blue-100/60 via-blue-50/40 to-purple-50/30 dark:from-blue-900/30 dark:via-blue-950/10 dark:to-purple-950/10',
                completed: 'from-purple-100/60 via-purple-50/40 to-green-50/30 dark:from-purple-900/30 dark:via-purple-950/10 dark:to-green-950/10',
              };
              // Sort sprints within group
              const sortedSprints = [...sprints].sort((a, b) => {
                const aDate = a[sortBy] ? new Date(a[sortBy]!) : new Date(0);
                const bDate = b[sortBy] ? new Date(b[sortBy]!) : new Date(0);
                return bDate.getTime() - aDate.getTime();
              });
              return (
                <div key={status} className={`rounded-3xl shadow-xl border border-white/20 dark:border-gray-800/50 p-8 bg-gradient-to-br ${sectionBg[status] || ''} relative overflow-hidden`}> 
                  <div className="flex items-center gap-3 mb-6">
                    {sectionIcons[status]}
                    <h3 className="text-2xl font-bold capitalize tracking-tight text-gray-900 dark:text-white drop-shadow">
                      {status === 'active' && 'Active Sprints'}
                      {status === 'upcoming' && 'Planned Sprints'}
                      {status === 'completed' && 'Completed Sprints'}
                    </h3>
                    <div className="ml-auto flex items-center gap-2">
                      <label htmlFor={`sort-${status}`} className="text-xs text-gray-500 mr-1">Sort by:</label>
                      <select
                        id={`sort-${status}`}
                        value={sortBy}
                        onChange={e => setSortBy(e.target.value as 'startDate' | 'endDate')}
                        className="border rounded px-2 py-1 text-xs bg-white dark:bg-gray-900 text-gray-700 dark:text-gray-200"
                      >
                        <option value="startDate">Start Date</option>
                        <option value="endDate">End Date</option>
                      </select>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {sortedSprints.length === 0 ? (
                      <div className="col-span-full flex flex-col items-center justify-center py-12">
                        <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-gray-200 via-gray-100 to-gray-300 dark:from-gray-800 dark:via-gray-900 dark:to-gray-700 flex items-center justify-center mb-4">
                          <FlagIcon className="h-8 w-8 text-gray-400 dark:text-gray-500" />
                        </div>
                        <div className="text-lg text-gray-400 dark:text-gray-500 font-medium">No {status} sprints.</div>
                      </div>
                    ) : sortedSprints.map((sprint: Sprint) => (
                      <Card key={sprint.id} className="flex flex-col gap-3 cursor-pointer bg-white/80 dark:bg-gray-900/80 border-2 border-transparent hover:border-blue-400 dark:hover:border-blue-500 shadow-lg hover:shadow-2xl transition-all duration-300 group relative overflow-hidden" onClick={() => setSelectedSprint(sprint)}>
                        <div className="absolute top-3 right-3 flex gap-2 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 md:opacity-0 md:group-hover:opacity-100 md:group-focus-within:opacity-100 transition-opacity z-10">
                          <button
                            className="p-1 rounded-full bg-blue-500 hover:bg-blue-700 focus:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-400 shadow-md transition-colors"
                            aria-label="View Sprint"
                            title="View Sprint"
                            onClick={e => { e.stopPropagation(); setSelectedSprint(sprint); }}
                          >
                            <EyeIcon className="h-5 w-5 text-white" />
                          </button>
                          {(status === 'active' || status === 'upcoming') && (
                            <>
                              <button
                                className="p-1 rounded-full bg-green-500 hover:bg-green-700 focus:bg-green-800 focus:outline-none focus:ring-2 focus:ring-green-400 shadow-md transition-colors"
                                aria-label="Edit Sprint"
                                title="Edit Sprint"
                                onClick={e => { e.stopPropagation(); handleEditSprint(sprint); }}
                              >
                                <PencilSquareIcon className="h-5 w-5 text-white" />
                              </button>
                              <button
                                className="p-1 rounded-full bg-red-500 hover:bg-red-700 focus:bg-red-800 focus:outline-none focus:ring-2 focus:ring-red-400 shadow-md transition-colors"
                                aria-label="Archive Sprint"
                                title="Archive Sprint"
                                onClick={e => {
                                  e.stopPropagation();
                                  setSprintToComplete(sprint);
                                  setCompleteModalOpen(true);
                                }}
                              >
                                <ArchiveBoxXMarkIcon className="h-5 w-5 text-white" />
                              </button>
                            </>
                          )}
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <div className="font-extrabold text-xl text-blue-700 dark:text-blue-300 group-hover:text-blue-900 dark:group-hover:text-blue-100 transition-colors duration-300">
                            {sprint.name}
                          </div>
                          <span className={`text-xs px-3 py-1 rounded-full font-bold shadow-sm capitalize 
                            ${sprint.status === 'ACTIVE' ? 'bg-gradient-to-r from-green-400 to-blue-400 text-white' : ''}
                            ${sprint.status === 'PLANNED' ? 'bg-gradient-to-r from-blue-400 to-purple-400 text-white' : ''}
                            ${sprint.status === 'COMPLETED' ? 'bg-gradient-to-r from-purple-400 to-green-400 text-white' : ''}
                            ${sprint.status === 'ACTIVE' ? 'border border-green-500 text-green-900 bg-green-100' : ''}
                            ${sprint.status === 'PLANNED' ? 'border border-blue-500 text-blue-900 bg-blue-100' : ''}
                            ${sprint.status === 'COMPLETED' ? 'border border-purple-500 text-purple-900 bg-purple-100' : ''}
                          `}>
                            {sprint.status.toLowerCase()}
                          </span>
                        </div>
                        {sprint.goal && <div className="text-base text-gray-600 dark:text-gray-300 italic mb-1 flex items-center gap-2"><FlagIcon className="h-4 w-4 text-blue-400" />{sprint.goal}</div>}
                        <div className="flex gap-6 text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {sprint.startDate && <span className="flex items-center gap-1"><CalendarDaysIcon className="h-4 w-4" />Start: {new Date(sprint.startDate).toLocaleDateString()}</span>}
                          {sprint.endDate && <span className="flex items-center gap-1"><CalendarDaysIcon className="h-4 w-4" />End: {new Date(sprint.endDate).toLocaleDateString()}</span>}
                        </div>
                        <SprintProgress projectId={projectId} sprintId={sprint.id} />
                        {/* Decorative gradient overlay */}
                        <div className="absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-to-br from-blue-200/30 via-purple-200/20 to-green-200/30 dark:from-blue-900/20 dark:via-purple-900/10 dark:to-green-900/20" />
                        {status === 'upcoming' && (
                          <Button
                            onClick={e => {
                              e.stopPropagation();
                              setStartingSprintId(sprint.id);
                              startSprint.mutate(undefined, {
                                onSettled: () => setStartingSprintId(null)
                              });
                            }}
                            loading={startSprint.isPending && startingSprintId === sprint.id}
                            className="mt-2 bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-bold"
                            fullWidth
                          >
                            Start Sprint
                          </Button>
                        )}
                        {startSprint.isError && startingSprintId === sprint.id && (
                          <div className="text-red-500 text-xs mt-1">{(startSprint.error as any)?.message || 'Failed to start sprint.'}</div>
                        )}
                      </Card>
                    ))}
                  </div>
                </div>
              );
            })}
        </div>
      )}
      {/* Create Sprint Modal */}
      <Modal open={modalOpen} onClose={() => setModalOpen(false)} title="Create Sprint">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <Input label="Name" {...register("name")}
            error={errors.name?.message} autoFocus />
          <Input label="Goal" {...register("goal")}
            error={errors.goal?.message} />
          <div>
            <label className="block mb-2 font-semibold text-sm">Start Date</label>
            <DatePicker
              selected={startDate}
              onChange={date => setStartDate(date)}
              selectsStart
              startDate={startDate}
              endDate={endDate}
              showTimeSelect
              dateFormat="Pp"
              className="w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm dark:text-white border-gray-200 dark:border-gray-700 transition-all duration-300 placeholder-gray-400 dark:placeholder-gray-500 hover:border-gray-300 dark:hover:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400 shadow-sm hover:shadow-md focus:shadow-lg"
              placeholderText="Select start date"
            />
          </div>
          <div>
            <label className="block mb-2 font-semibold text-sm">End Date</label>
            <DatePicker
              selected={endDate}
              onChange={date => setEndDate(date)}
              selectsEnd
              startDate={startDate}
              endDate={endDate}
              minDate={startDate ?? undefined}
              showTimeSelect
              dateFormat="Pp"
              className="w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm dark:text-white border-gray-200 dark:border-gray-700 transition-all duration-300 placeholder-gray-400 dark:placeholder-gray-500 hover:border-gray-300 dark:hover:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400 shadow-sm hover:shadow-md focus:shadow-lg"
              placeholderText="Select end date"
            />
          </div>
          {dateError && <div className="text-red-500 text-sm mt-1">{dateError}</div>}
          {errors.root?.message && <div className="text-red-500 text-sm mt-2">{errors.root.message}</div>}
          <Button type="submit" loading={createSprint.isPending} fullWidth className="mt-4 bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-bold">Create Sprint</Button>
        </form>
      </Modal>
      {/* Edit Sprint Modal (reuse create modal with pre-filled values) */}
      {editSprint && (
        <Modal open={!!editSprint} onClose={() => setEditSprint(null)} title="Edit Sprint">
          <form onSubmit={handleSubmit(async (data) => {
            setEditDateError(null);
            if (!editStartDate || !editEndDate) {
              setEditDateError('Both start and end dates are required.');
              return;
            }
            if (editStartDate >= editEndDate) {
              setEditDateError('End date must be after start date.');
              return;
            }
            await updateSprint.mutateAsync({
              ...data,
              startDate: editStartDate.toISOString(),
              endDate: editEndDate.toISOString(),
            });
            setEditSprint(null);
            reset();
          })} className="space-y-4">
            <Input label="Name" {...register('name')} error={errors.name?.message} autoFocus />
            <Input label="Goal" {...register('goal')} error={errors.goal?.message} />
            <div>
              <label className="block mb-2 font-semibold text-sm">Start Date</label>
              <DatePicker
                selected={editStartDate}
                onChange={date => setEditStartDate(date)}
                selectsStart
                startDate={editStartDate}
                endDate={editEndDate}
                showTimeSelect
                dateFormat="Pp"
                className="w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm dark:text-white border-gray-200 dark:border-gray-700 transition-all duration-300 placeholder-gray-400 dark:placeholder-gray-500 hover:border-gray-300 dark:hover:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400 shadow-sm hover:shadow-md focus:shadow-lg"
                placeholderText="Select start date"
              />
            </div>
            <div>
              <label className="block mb-2 font-semibold text-sm">End Date</label>
              <DatePicker
                selected={editEndDate}
                onChange={date => setEditEndDate(date)}
                selectsEnd
                startDate={editStartDate}
                endDate={editEndDate}
                minDate={editStartDate ?? undefined}
                showTimeSelect
                dateFormat="Pp"
                className="w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm dark:text-white border-gray-200 dark:border-gray-700 transition-all duration-300 placeholder-gray-400 dark:placeholder-gray-500 hover:border-gray-300 dark:hover:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400 shadow-sm hover:shadow-md focus:shadow-lg"
                placeholderText="Select end date"
              />
            </div>
            {editDateError && <div className="text-red-500 text-sm mt-1">{editDateError}</div>}
            {errors.root?.message && <div className="text-red-500 text-sm mt-2">{errors.root.message}</div>}
            <Button type="submit" loading={updateSprint.isPending} fullWidth className="mt-4 bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-bold">Save Changes</Button>
          </form>
        </Modal>
      )}
      {/* Sprint Detail Modal */}
      {selectedSprint && (
        <SprintDetailModal
          open={!!selectedSprint}
          onClose={() => setSelectedSprint(null)}
          sprint={selectedSprint}
          projectId={projectId}
        />
      )}
      {/* Complete Sprint Modal */}
      <Modal open={completeModalOpen} onClose={() => { setCompleteModalOpen(false); setSprintToComplete(null); setNextSprintId(undefined); setArchiveError(null); }} title="Complete Sprint">
        <div className="space-y-6 p-2 md:p-6">
          <div className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-2">Where should incomplete issues be moved?</div>
          <div className="flex flex-col gap-4">
            <label className="flex items-center gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 cursor-pointer hover:bg-blue-50 dark:hover:bg-blue-900 transition">
              <input
                type="radio"
                checked={!nextSprintId}
                onChange={() => setNextSprintId(undefined)}
                className="accent-blue-500"
              />
              <span className="font-medium text-gray-700 dark:text-gray-200">Backlog</span>
            </label>
            <label className="flex items-center gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 cursor-pointer hover:bg-green-50 dark:hover:bg-green-900 transition">
              <input
                type="radio"
                checked={!!nextSprintId}
                onChange={() => {
                  const available = grouped.active.filter(s => s.id !== sprintToComplete?.id);
                  setNextSprintId(available.length > 0 ? available[0].id : "");
                }}
                disabled={grouped.active.filter(s => s.id !== sprintToComplete?.id).length === 0}
                className="accent-green-500"
              />
              <span className="font-medium text-gray-700 dark:text-gray-200">Next Sprint:</span>
              <select
                value={nextSprintId || ''}
                onChange={e => {
                  setNextSprintId(e.target.value);
                }}
                disabled={grouped.active.filter(s => s.id !== sprintToComplete?.id).length === 0}
                className="ml-2 border rounded px-2 py-1 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-green-400"
              >
                <option value="">Select sprint</option>
                {grouped.active.filter(s => s.id !== sprintToComplete?.id).map(s => (
                  <option key={s.id} value={s.id}>{s.name}</option>
                ))}
              </select>
            </label>
          </div>
          {archiveError && <div className="text-red-500 text-sm mt-2">{archiveError}</div>}
          <Button
            onClick={async () => {
              if (!sprintToComplete) return;
              setArchiveError(null);
              if (!!nextSprintId && nextSprintId === "") {
                setArchiveError("Please select a next sprint.");
                return;
              }
              try {
                await archiveSprint.mutateAsync(nextSprintId);
                setCompleteModalOpen(false);
                setSprintToComplete(null);
                setNextSprintId(undefined);
              } catch (e: any) {
                setArchiveError(e?.message || 'Failed to complete sprint.');
              }
            }}
            loading={archiveSprint.isPending}
            fullWidth
            className="mt-4 bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-bold text-lg py-3 rounded-xl shadow-lg"
            disabled={!!nextSprintId && nextSprintId === ""}
          >
            Complete Sprint
          </Button>
        </div>
      </Modal>
      {/* Add floating action button */}
      <button
        onClick={() => setModalOpen(true)}
        className="fixed bottom-6 right-6 z-40 flex items-center gap-2 px-6 py-4 rounded-full bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold shadow-2xl hover:scale-105 hover:shadow-green-400/30 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-400"
        aria-label="Create Sprint"
        title="Create Sprint"
      >
        <PlusIcon className="h-6 w-6" />
        <span>Create Sprint</span>
      </button>
    </div>
  );
} 