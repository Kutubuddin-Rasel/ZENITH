import React, { useState } from 'react';
import Modal from './Modal';
import Input from './Input';
import Button from './Button';
import { useInviteProjectMember } from '@/hooks/useInviteProjectMember';

const ROLES = [
  'ProjectLead',
  'Developer',
  'QA',
  'Viewer',
];

interface AddMemberModalProps {
  open: boolean;
  onClose: () => void;
  projectId: string;
}

const AddMemberModal: React.FC<AddMemberModalProps> = ({ open, onClose, projectId }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState(ROLES[1]);
  const [error, setError] = useState<string | null>(null);
  const inviteMutation = useInviteProjectMember(projectId);

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    if (!email) {
      setError('Please enter an email address.');
      return;
    }
    if (!role) {
      setError('Please select a role.');
      return;
    }
    try {
      await inviteMutation.mutateAsync({ email, roleName: role });
      setEmail('');
      setRole(ROLES[1]);
      onClose();
    } catch (err: any) {
      setError(err.message || 'Failed to send invite.');
    }
  };

  return (
    <Modal open={open} onClose={onClose} title="Invite Team Member">
      <form onSubmit={handleInvite} className="space-y-6">
        <Input
          label="User Email"
          type="email"
          value={email}
          onChange={e => setEmail(e.target.value)}
          placeholder="user@example.com"
          required
        />
        <div>
          <label className="block mb-2 font-semibold text-sm">Role</label>
          <select
            className="w-full px-4 py-3 border-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 bg-white/80 dark:bg-gray-900/80 border-gray-200 dark:border-gray-700 transition-all duration-300"
            value={role}
            onChange={e => setRole(e.target.value)}
            required
          >
            {ROLES.map(r => (
              <option key={r} value={r}>{r}</option>
            ))}
          </select>
        </div>
        {error && <div className="text-red-500 text-sm">{error}</div>}
        <div className="flex justify-end gap-2">
          <Button type="button" variant="secondary" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" loading={inviteMutation.isPending}>
            Send Invite
          </Button>
        </div>
      </form>
    </Modal>
  );
};

export default AddMemberModal;
